{"version":3,"file":"notificationDetailsSerializer.js","sourceRoot":"","sources":["../../../src/serializers/notificationDetailsSerializer.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAOlC,OAAO,EAAE,kBAAkB,EAAE,UAAU,EAAE,oBAAoB,EAAE,SAAS,EAAE,MAAM,mBAAmB,CAAC;AACpG,OAAO,EAAE,QAAQ,EAAE,MAAM,iBAAiB,CAAC;AAE3C;;;GAGG;AACH,MAAM,CAAC,KAAK,UAAU,wBAAwB,CAAC,QAAgB;IAC7D,MAAM,GAAG,GAAG,MAAM,QAAQ,CAAC,QAAQ,EAAE;QACnC,WAAW,EAAE,IAAI;QACjB,SAAS,EAAE,CAAC,sCAAsC,CAAC;KACpD,CAAC,CAAC;IACH,MAAM,mBAAmB,GAAG,GAAG,CAAC,qBAAqB,CAAC,CAAC;IAEvD,IAAI,iBAAkE,CAAC;IACvE,IAAI,SAAS,CAAC,mBAAmB,CAAC,mBAAmB,CAAC,CAAC,EAAE;QACvD,iBAAiB,GAAG,kBAAkB,CAAC,mBAAmB,CAAC,mBAAmB,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;KAC7F;IAED,IAAI,gBAAiE,CAAC;IACtE,IAAI,SAAS,CAAC,mBAAmB,CAAC,kBAAkB,CAAC,CAAC,EAAE;QACtD,gBAAgB,GAAG,kBAAkB,CAAC,mBAAmB,CAAC,kBAAkB,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;KAC3F;IAED,IAAI,kBAAmE,CAAC;IACxE,IAAI,SAAS,CAAC,mBAAmB,CAAC,oBAAoB,CAAC,CAAC,EAAE;QACxD,kBAAkB,GAAG,kBAAkB,CAAC,mBAAmB,CAAC,oBAAoB,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;KAC/F;IAED,IAAI,gBAAiE,CAAC;IACtE,IAAI,SAAS,CAAC,mBAAmB,CAAC,kBAAkB,CAAC,CAAC,EAAE;QACtD,gBAAgB,GAAG,kBAAkB,CAAC,mBAAmB,CAAC,kBAAkB,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;KAC3F;IAED,IAAI,gBAAiE,CAAC;IACtE,IAAI,SAAS,CAAC,mBAAmB,CAAC,kBAAkB,CAAC,CAAC,EAAE;QACtD,gBAAgB,GAAG,kBAAkB,CAAC,mBAAmB,CAAC,kBAAkB,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;KAC3F;IAED,OAAO;QACL,cAAc,EAAE,oBAAoB,CAAC,mBAAmB,CAAC,gBAAgB,CAAC,CAAC;QAC3E,QAAQ,EAAE,oBAAoB,CAAC,mBAAmB,CAAC,UAAU,CAAC,CAAC;QAC/D,KAAK,EAAE,oBAAoB,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAA6B;QACrF,WAAW,EAAE,kBAAkB,CAAC,mBAAmB,CAAC,aAAa,CAAC,CAAC;QACnE,SAAS,EAAE,kBAAkB,CAAC,mBAAmB,CAAC,WAAW,CAAC,CAAC;QAC/D,OAAO,EAAE,kBAAkB,CAAC,mBAAmB,CAAC,SAAS,CAAC,CAAC;QAC3D,kBAAkB,EAAE,oBAAoB,CAAC,mBAAmB,CAAC,oBAAoB,CAAC,CAAC;QACnF,eAAe,EAAE,oBAAoB,CAAC,mBAAmB,CAAC,iBAAiB,CAAC,CAAC;QAC7E,iBAAiB;QACjB,gBAAgB;QAChB,kBAAkB;QAClB,gBAAgB;QAChB,gBAAgB;KACjB,CAAC;AACJ,CAAC;AAED,SAAS,kBAAkB,CAAC,MAA6B;IACvD,MAAM,OAAO,GAAwC,EAAE,CAAC;IACxD,KAAK,MAAM,IAAI,IAAI,MAAM,EAAE;QACzB,OAAO,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,EAAE,KAAK,EAAE,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,OAAO,CAAC,EAAE,CAAC,CAAC;KAClF;IAED,OAAO,OAAO,CAAC;AACjB,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  NotificationDetails,\n  NotificationOutcomeCollectionItem,\n  NotificationOutcomeState,\n} from \"../models/notificationDetails.js\";\nimport { getDateOrUndefined, getInteger, getStringOrUndefined, isDefined } from \"../utils/utils.js\";\nimport { parseXML } from \"@azure/core-xml\";\n\n/**\n * @internal\n * Parses a NotificationDetails from incoming XML.\n */\nexport async function parseNotificationDetails(bodyText: string): Promise<NotificationDetails> {\n  const xml = await parseXML(bodyText, {\n    includeRoot: true,\n    stopNodes: [\"NotificationDetails.NotificationBody\"],\n  });\n  const notificationDetails = xml[\"NotificationDetails\"];\n\n  let apnsOutcomeCounts: NotificationOutcomeCollectionItem[] | undefined;\n  if (isDefined(notificationDetails[\"ApnsOutcomeCounts\"])) {\n    apnsOutcomeCounts = parseOutcomeCounts(notificationDetails[\"ApnsOutcomeCounts\"][\"Outcome\"]);\n  }\n\n  let admOutcomeCounts: NotificationOutcomeCollectionItem[] | undefined;\n  if (isDefined(notificationDetails[\"AdmOutcomeCounts\"])) {\n    admOutcomeCounts = parseOutcomeCounts(notificationDetails[\"AdmOutcomeCounts\"][\"Outcome\"]);\n  }\n\n  let baiduOutcomeCounts: NotificationOutcomeCollectionItem[] | undefined;\n  if (isDefined(notificationDetails[\"BaiduOutcomeCounts\"])) {\n    baiduOutcomeCounts = parseOutcomeCounts(notificationDetails[\"BaiduOutcomeCounts\"][\"Outcome\"]);\n  }\n\n  let fcmOutcomeCounts: NotificationOutcomeCollectionItem[] | undefined;\n  if (isDefined(notificationDetails[\"GcmOutcomeCounts\"])) {\n    fcmOutcomeCounts = parseOutcomeCounts(notificationDetails[\"GcmOutcomeCounts\"][\"Outcome\"]);\n  }\n\n  let wnsOutcomeCounts: NotificationOutcomeCollectionItem[] | undefined;\n  if (isDefined(notificationDetails[\"WnsOutcomeCounts\"])) {\n    wnsOutcomeCounts = parseOutcomeCounts(notificationDetails[\"WnsOutcomeCounts\"][\"Outcome\"]);\n  }\n\n  return {\n    notificationId: getStringOrUndefined(notificationDetails[\"NotificationId\"]),\n    location: getStringOrUndefined(notificationDetails[\"Location\"]),\n    state: getStringOrUndefined(notificationDetails[\"State\"]) as NotificationOutcomeState,\n    enqueueTime: getDateOrUndefined(notificationDetails[\"EnqueueTime\"]),\n    startTime: getDateOrUndefined(notificationDetails[\"StartTime\"]),\n    endTime: getDateOrUndefined(notificationDetails[\"EndTime\"]),\n    pnsErrorDetailsUrl: getStringOrUndefined(notificationDetails[\"PnsErrorDetailsUri\"]),\n    targetPlatforms: getStringOrUndefined(notificationDetails[\"TargetPlatforms\"]),\n    apnsOutcomeCounts,\n    admOutcomeCounts,\n    baiduOutcomeCounts,\n    fcmOutcomeCounts,\n    wnsOutcomeCounts,\n  };\n}\n\nfunction parseOutcomeCounts(counts: Record<string, any>[]): NotificationOutcomeCollectionItem[] {\n  const results: NotificationOutcomeCollectionItem[] = [];\n  for (const item of counts) {\n    results.push({ state: item[\"Name\"], count: getInteger(item[\"Count\"], \"Count\") });\n  }\n\n  return results;\n}\n"]}