{"version":3,"file":"notificationHubsClient.js","sourceRoot":"","sources":["../../src/notificationHubsClient.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { Installation, JsonPatch, PushHandle } from \"./models/installation.js\";\nimport { NotificationHubsClientContext, createClientContext } from \"./client/index.js\";\nimport {\n  NotificationHubsClientOptions,\n  RegistrationQueryLimitOptions,\n  RegistrationQueryOptions,\n  SendOperationOptions,\n} from \"./models/options.js\";\nimport { NotificationHubsMessageResponse, NotificationHubsResponse } from \"./models/response.js\";\nimport { Notification } from \"./models/notification.js\";\nimport { NotificationDetails } from \"./models/notificationDetails.js\";\nimport { NotificationHubJob } from \"./models/notificationHubJob.js\";\nimport { OperationOptions } from \"@azure/core-client\";\nimport { PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport { RegistrationDescription } from \"./models/registration.js\";\nimport { cancelScheduledNotification as cancelScheduledNotificationMethod } from \"./client/cancelScheduledNotification.js\";\nimport { createOrUpdateInstallation as createOrUpdateInstallationMethod } from \"./client/createOrUpdateInstallation.js\";\nimport { createOrUpdateRegistration as createOrUpdateRegistrationMethod } from \"./client/createOrUpdateRegistration.js\";\nimport { createRegistrationId as createRegistrationIdMethod } from \"./client/createRegistrationId.js\";\nimport { createRegistration as createRegistrationMethod } from \"./client/createRegistration.js\";\nimport { deleteInstallation as deleteInstallationMethod } from \"./client/deleteInstallation.js\";\nimport { getFeedbackContainerUrl as getFeedbackContainerUrlMethod } from \"./client/getFeedbackContainerUrl.js\";\nimport { getInstallation as getInstallationMethod } from \"./client/getInstallation.js\";\nimport { getNotificationHubJob as getNotificationHubJobMethod } from \"./client/getNotificationHubJob.js\";\nimport { getNotificationOutcomeDetails as getNotificationOutcomeDetailsMethod } from \"./client/getNotificationOutcomeDetails.js\";\nimport { getRegistration as getRegistrationMethod } from \"./client/getRegistration.js\";\nimport { listNotificationHubJobs as listNotificationHubJobsMethod } from \"./client/listNotificationHubJobs.js\";\nimport { listRegistrationsByTag as listRegistrationsByTagMethod } from \"./client/listRegistrationsByTag.js\";\nimport { listRegistrations as listRegistrationsMethod } from \"./client/listRegistrations.js\";\nimport { scheduleBroadcastNotification as scheduleBroadcastNotificationMethod } from \"./client/scheduleBroadcastNotification.js\";\nimport { scheduleNotification as scheduleNotificationMethod } from \"./client/scheduleNotification.js\";\nimport { sendBroadcastNotification as sendBroadcastNotificationMethod } from \"./client/sendBroadcastNotification.js\";\nimport { sendDirectNotification as sendDirectNotificationMethod } from \"./client/sendDirectNotification.js\";\nimport { sendNotification as sendNotificationMethod } from \"./client/sendNotification.js\";\nimport { submitNotificationHubJob as submitNotificationHubJobMethod } from \"./client/submitNotificationHubJob.js\";\nimport { updateInstallation as updateInstallationMethod } from \"./client/updateInstallation.js\";\nimport { updateRegistration as updateRegistrationMethod } from \"./client/updateRegistration.js\";\n\n/**\n * This represents a client for Azure Notification Hubs to manage installations and send\n * messages to devices.\n */\nexport class NotificationHubsServiceClient {\n  private _client: NotificationHubsClientContext;\n\n  /**\n   * Creates a new instance of the NotificationClient with a connection string, hub name and options.\n   * @param connectionString - The Notification Hub Access Policy connection string.\n   * @param hubName - The name of the Azure Notification Hub.\n   * @param options - Options for configuring the Azure Notification Hubs client.\n   */\n  constructor(\n    connectionString: string,\n    hubName: string,\n    options: NotificationHubsClientOptions = {}\n  ) {\n    this._client = createClientContext(connectionString, hubName, options);\n  }\n\n  /**\n   * Creates or overwrites an installation to a Notification Hub.\n   * @param installation - The installation to create or overwrite.\n   * @param options - Configuration options for the create or update installation operation.\n   * @returns A NotificationHubResponse with the tracking ID, correlation ID and location.\n   */\n  createOrUpdateInstallation(\n    installation: Installation,\n    options: OperationOptions = {}\n  ): Promise<NotificationHubsResponse> {\n    return createOrUpdateInstallationMethod(this._client, installation, options);\n  }\n\n  /**\n   * Deletes an installation from a Notification Hub.\n   * @param installationId - The installation ID of the installation to delete.\n   * @param options - Configuration options for the installation delete operation.\n   * @returns A NotificationHubResponse with the tracking ID, correlation ID and location.\n   */\n  deleteInstallation(\n    installationId: string,\n    options: OperationOptions = {}\n  ): Promise<NotificationHubsResponse> {\n    return deleteInstallationMethod(this._client, installationId, options);\n  }\n\n  /**\n   * Gets an Azure Notification Hub installation by the installation ID.\n   * @param installationId - The ID of the installation to get.\n   * @param options - Configuration options for the get installation operation.\n   * @returns The installation that matches the installation ID.\n   */\n  getInstallation(installationId: string, options: OperationOptions = {}): Promise<Installation> {\n    return getInstallationMethod(this._client, installationId, options);\n  }\n\n  /**\n   * Updates an installation using the JSON-Patch standard in RFC6902.\n   * @param installationId - The ID of the installation to update.\n   * @param patches - An array of patches following the JSON-Patch standard.\n   * @param options - Configuration options for the patch installation operation.\n   * @returns A NotificationHubResponse with the tracking ID, correlation ID and location.\n   */\n  updateInstallation(\n    installationId: string,\n    patches: JsonPatch[],\n    options: OperationOptions = {}\n  ): Promise<NotificationHubsResponse> {\n    return updateInstallationMethod(this._client, installationId, patches, options);\n  }\n\n  /**\n   * Creates a new registration ID.\n   * @param options - The options for creating a new registration ID.\n   * @returns The newly created registration ID.\n   */\n  createRegistrationId(options: OperationOptions = {}): Promise<string> {\n    return createRegistrationIdMethod(this._client, options);\n  }\n\n  /**\n   * Creates a new registration. This method generates a registration ID,\n   * which you can subsequently use to retrieve, update, and delete this registration.\n   * @param registration - The registration to create.\n   * @param options - Options for creating a new registration.\n   * @returns The newly created registration description.\n   */\n  createRegistration(\n    registration: RegistrationDescription,\n    options: OperationOptions = {}\n  ): Promise<RegistrationDescription> {\n    return createRegistrationMethod(this._client, registration, options);\n  }\n\n  /**\n   * Creates or updates a registration.\n   * @param registration - The registration to create or update.\n   * @param options - The operation options.\n   * @returns The created or updated registration description.\n   */\n  createOrUpdateRegistration(\n    registration: RegistrationDescription,\n    options: OperationOptions = {}\n  ): Promise<RegistrationDescription> {\n    return createOrUpdateRegistrationMethod(this._client, registration, options);\n  }\n\n  /**\n   * Updates an existing registration.\n   * @param registration - The registration to update.\n   * @param options - The operation options.\n   * @returns The updated registration description.\n   */\n  updateRegistration(\n    registration: RegistrationDescription,\n    options: OperationOptions = {}\n  ): Promise<RegistrationDescription> {\n    return updateRegistrationMethod(this._client, registration, options);\n  }\n\n  /**\n   * Gets a registration by the given registration ID.\n   * @param registrationId - The ID of the registration to get.\n   * @param options - The options for getting a registration by ID.\n   * @returns A RegistrationDescription that has the given registration ID.\n   */\n  getRegistration(\n    registrationId: string,\n    options: OperationOptions = {}\n  ): Promise<RegistrationDescription> {\n    return getRegistrationMethod(this._client, registrationId, options);\n  }\n\n  /**\n   * Gets all registrations for the notification hub with the given query options.\n   * @param options - The options for querying the registrations such as $top and $filter.\n   * @returns A paged async iterable containing all of the registrations for the notification hub.\n   */\n  listRegistrations(\n    options: RegistrationQueryOptions = {}\n  ): PagedAsyncIterableIterator<RegistrationDescription> {\n    return listRegistrationsMethod(this._client, options);\n  }\n\n  /**\n   * Lists all registrations with the matching tag.\n   * @param tag - The tag to query for matching registrations.\n   * @param options - The query options such as $top.\n   * @returns A paged async iterable containing the matching registrations for the notification hub.\n   */\n  listRegistrationsByTag(\n    tag: string,\n    options: RegistrationQueryLimitOptions = {}\n  ): PagedAsyncIterableIterator<RegistrationDescription> {\n    return listRegistrationsByTagMethod(this._client, tag, options);\n  }\n\n  /**\n   * Sends a direct push notification to a device with the given push handle.\n   * @param pushHandle - The push handle which is the unique identifier for the device.\n   * @param notification - The notification to send to the device.\n   * @param options - Configuration options for the direct send operation which can contain custom headers\n   * which may include APNs specific such as apns-topic or for WNS, X-WNS-TYPE.\n   * @returns A NotificationHubResponse with the tracking ID, correlation ID and location.\n   */\n  sendDirectNotification(\n    pushHandle: PushHandle,\n    notification: Notification,\n    options: SendOperationOptions = {}\n  ): Promise<NotificationHubsMessageResponse> {\n    return sendDirectNotificationMethod(this._client, pushHandle, notification, options);\n  }\n\n  /**\n   * Sends push notifications to devices that match the given tags or tag expression.\n   * @param tags - The tags used to target the device for push notifications in either an array or tag expression.\n   * @param notification - The notification to send to the matching devices.\n   * @param options - Configuration options for the direct send operation which can contain custom headers\n   * which may include APNs specific such as apns-topic or for WNS, X-WNS-TYPE.\n   * @returns A NotificationHubResponse with the tracking ID, correlation ID and location.\n   */\n  sendNotification(\n    tags: string[] | string,\n    notification: Notification,\n    options: SendOperationOptions = {}\n  ): Promise<NotificationHubsMessageResponse> {\n    return sendNotificationMethod(this._client, tags, notification, options);\n  }\n\n  /**\n   * Sends push notifications to all devices on the Notification Hub.\n   * @param notification - The notification to send to all devices.\n   * @param options - Configuration options for the direct send operation which can contain custom headers\n   * which may include APNs specific such as apns-topic or for WNS, X-WNS-TYPE.\n   * @returns A NotificationHubResponse with the tracking ID, correlation ID and location.\n   */\n  sendBroadcastNotification(\n    notification: Notification,\n    options: SendOperationOptions = {}\n  ): Promise<NotificationHubsMessageResponse> {\n    return sendBroadcastNotificationMethod(this._client, notification, options);\n  }\n\n  /**\n   * Schedules a push notification to devices that match the given tags or tag expression at the specified time.\n   * NOTE: This is only available in Standard SKU Azure Notification Hubs.\n   * @param scheduledTime - The Date to send the push notification.\n   * @param tags - The tags used to target the device for push notifications in either an array or tag expression.\n   * @param notification - The notification to send to the matching devices.\n   * @param options - Configuration options for the direct send operation which can contain custom headers\n   * which may include APNs specific such as apns-topic or for WNS, X-WNS-TYPE.\n   * @returns A NotificationHubResponse with the tracking ID, correlation ID and location.\n   */\n  scheduleNotification(\n    scheduledTime: Date,\n    tags: string[] | string,\n    notification: Notification,\n    options: OperationOptions = {}\n  ): Promise<NotificationHubsMessageResponse> {\n    return scheduleNotificationMethod(this._client, scheduledTime, tags, notification, options);\n  }\n\n  /**\n   * Schedules a push notification to all devices registered on the Notification Hub.\n   * NOTE: This is only available in Standard SKU Azure Notification Hubs.\n   * @param scheduledTime - The Date to send the push notification.\n   * @param notification - The notification to send to the matching devices.\n   * @param options - Configuration options for the direct send operation which can contain custom headers\n   * which may include APNs specific such as apns-topic or for WNS, X-WNS-TYPE.\n   * @returns A NotificationHubResponse with the tracking ID, correlation ID and location.\n   */\n  scheduleBroadcastNotification(\n    scheduledTime: Date,\n    notification: Notification,\n    options: OperationOptions = {}\n  ): Promise<NotificationHubsMessageResponse> {\n    return scheduleBroadcastNotificationMethod(this._client, scheduledTime, notification, options);\n  }\n\n  /**\n   * Cancels the scheduled notification with the given notification ID.\n   * @param notificationId - The notification ID from the scheduled notification.\n   * @param options - The operation options.\n   * @returns A notification hub response with correlation ID and tracking ID.\n   */\n  cancelScheduledNotification(\n    notificationId: string,\n    options: OperationOptions = {}\n  ): Promise<NotificationHubsResponse> {\n    return cancelScheduledNotificationMethod(this._client, notificationId, options);\n  }\n\n  /**\n   * Retrieves an Azure Storage container URL. The container has feedback data for the notification hub.\n   * The caller can then use the Azure Storage Services SDK to retrieve the contents of the container.\n   * @param options - The options for getting the push notification feedback container URL.\n   * @returns The URL of the Azure Storage Container containing the feedback data.\n   */\n  getFeedbackContainerUrl(options: OperationOptions = {}): Promise<string> {\n    return getFeedbackContainerUrlMethod(this._client, options);\n  }\n\n  /**\n   * Retrieves the results of a send operation. This can retrieve intermediate results if the send is being processed\n   * or final results if the Send* has completed. This API can only be called for Standard SKU and above.\n   * @param notificationId - The notification ID returned from the send operation.\n   * @param options - The operation options.\n   * @returns The results of the send operation.\n   */\n  getNotificationOutcomeDetails(\n    notificationId: string,\n    options: OperationOptions = {}\n  ): Promise<NotificationDetails> {\n    return getNotificationOutcomeDetailsMethod(this._client, notificationId, options);\n  }\n\n  /**\n   * Gets a Notification Hub Job by the ID.\n   * @param jobId - The Notification Hub Job ID.\n   * @param options - The operation options.\n   * @returns The Notification Hub Job with the matching ID.\n   */\n  getNotificationHubJob(\n    jobId: string,\n    options: OperationOptions = {}\n  ): Promise<NotificationHubJob> {\n    return getNotificationHubJobMethod(this._client, jobId, options);\n  }\n\n  /**\n   * Submits a Notification Hub Job.  Note this is available to Standard SKU namespace and above.\n   * @param job - The notification hub job to submit.\n   * @param options - The operation options.\n   * @returns The notification hub job details including job ID and status.\n   */\n  submitNotificationHubJob(\n    job: NotificationHubJob,\n    options: OperationOptions = {}\n  ): Promise<NotificationHubJob> {\n    return submitNotificationHubJobMethod(this._client, job, options);\n  }\n\n  /**\n   * Gets all Notification Hub Jobs for this Notification Hub.\n   * @param options - The operation options.\n   * @returns An array of all Notification Hub Jobs for this Notification Hub.\n   */\n  listNotificationHubJobs(options: OperationOptions = {}): Promise<NotificationHubJob[]> {\n    return listNotificationHubJobsMethod(this._client, options);\n  }\n}\n"]}