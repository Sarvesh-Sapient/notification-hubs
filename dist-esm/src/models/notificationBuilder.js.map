{"version":3,"file":"notificationBuilder.js","sourceRoot":"","sources":["../../../src/models/notificationBuilder.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  AdmNotification,\n  AppleNotification,\n  BaiduNotification,\n  FirebaseLegacyNotification,\n  WindowsNotification,\n  createAdmNotification,\n  createAppleNotification,\n  createBaiduNotification,\n  createFirebaseLegacyNotification,\n  createWindowsBadgeNotification,\n} from \"./notification.js\";\nimport { isDefined, isString } from \"../utils/utils.js\";\nimport { stringifyXML } from \"@azure/core-xml\";\n\n/**\n * Represents what is in the APNs alert body.\n */\nexport interface AppleAlert {\n  /**\n   * The title of the notification. Apple Watch displays this string in the short look notification\n   * interface. Specify a string that’s quickly understood by the user.\n   */\n  title?: string;\n\n  /**\n   * Additional information that explains the purpose of the notification.\n   */\n  subtitle?: string;\n\n  /**\n   * The content of the alert message.\n   */\n  body?: string;\n\n  /**\n   * The name of the launch image file to display. If the user chooses to launch your app,\n   * the contents of the specified image or storyboard file are displayed instead of your app’s normal launch image.\n   */\n  launchImage?: string;\n\n  /**\n   * The key for a localized title string. Specify this key instead of the title key to retrieve\n   * the title from your app’s Localizable.strings files. The value must contain the name of a key in your strings file.\n   */\n  titleLocKey?: string;\n\n  /**\n   * An array of strings containing replacement values for variables in your title string.\n   * Each %\\@ character in the string specified by the title-loc-key is replaced by a value\n   * from this array. The first item in the array replaces the first instance\n   * of the %\\@ character in the string, the second item replaces the second instance, and so on.\n   */\n  titleLocArgs?: string[];\n\n  /**\n   * The key for a localized subtitle string. Use this key, instead of the subtitle key, to\n   * retrieve the subtitle from your app’s Localizable.strings file.\n   * The value must contain the name of a key in your strings file.\n   */\n  subtitleLocKey?: string;\n\n  /**\n   * An array of strings containing replacement values for variables in your title string.\n   * Each %\\@ character in the string specified by subtitle-loc-key is replaced by a value\n   * from this array. The first item in the array replaces the first instance of the\n   * %\\@ character in the string, the second item replaces the second instance, and so on.\n   */\n  subtitleLocArgs?: string[];\n\n  /**\n   * The key for a localized message string. Use this key, instead of the body key, to\n   * retrieve the message text from your app’s Localizable.strings file. The value must contain\n   * the name of a key in your strings file.\n   */\n  locKey?: string;\n\n  /**\n   * An array of strings containing replacement values for variables in your message text.\n   * Each %\\@ character in the string specified by loc-key is replaced by a value from\n   * this array. The first item in the array replaces the first instance of the %\\@ character\n   * in the string, the second item replaces the second instance, and so on.\n   */\n  locArgs?: string[];\n}\n\n/**\n * Represents an APNs critical sound\n */\nexport interface AppleCriticalSound {\n  /**\n   * The critical alert flag. Set to 1 to enable the critical alert.\n   */\n  critical: number;\n\n  /**\n   * The name of a sound file in your app’s main bundle or in the Library/Sounds folder\n   * of your app’s container directory. Specify the string “default” to play the system sound.\n   */\n  name: string;\n\n  /**\n   * The volume for the critical alert’s sound. Set this to a value between 0 (silent) and 1 (full volume).\n   */\n  volume: number;\n}\n\n/**\n * Represents a native APNs message.\n */\nexport interface AppleNativeMessage extends Record<string, any> {\n  /**\n   * The information for displaying an alert.\n   */\n  alert?: string | AppleAlert;\n\n  /**\n   * The number to display in a badge on your app’s icon.\n   */\n  badge?: number;\n\n  /**\n   * The name of a sound file in your app’s main bundle or in the Library/Sounds\n   * folder of your app’s container directory. Specify the string “default” to\n   * play the system sound. Use this key for regular notifications.\n   * For critical alerts, use the sound dictionary instead.\n   */\n  sound?: string | AppleCriticalSound;\n\n  /**\n   * An app-specific identifier for grouping related notifications.\n   */\n  threadId?: string;\n\n  /**\n   * The notification’s type.\n   */\n  category?: string;\n\n  /**\n   * The background notification flag. To perform a silent background update,\n   * specify the value 1 and don’t include the alert, badge, or sound keys in your payload.\n   */\n  contentAvailable?: number;\n\n  /**\n   * The notification service app extension flag. If the value is 1, the system passes\n   * the notification to your notification service app extension before delivery.\n   */\n  mutableContent?: number;\n\n  /**\n   * The identifier of the window brought forward.\n   */\n  targetContentId?: string;\n\n  /**\n   * The importance and delivery timing of a notification.\n   */\n  interruptionLevel?: \"passive\" | \"active\" | \"time-sensitive\" | \"critical\";\n\n  /**\n   * The relevance score, a number between 0 and 1, that the system uses to sort the\n   * notifications from your app. The highest score gets featured in the notification summary.\n   */\n  relevanceScore?: number;\n\n  /**\n   * The criteria the system evaluates to determine if it displays the notification in the current Focus.\n   */\n  filterCriteria?: string;\n}\n\nfunction createAppleNativeAlert(\n  nativeAlert?: string | AppleAlert\n): Record<string, any> | string | undefined {\n  if (!isDefined(nativeAlert)) {\n    return undefined;\n  }\n\n  if (isString(nativeAlert)) {\n    return nativeAlert;\n  }\n\n  const alert: Record<string, any> = {\n    title: nativeAlert.title,\n    subtitle: nativeAlert.subtitle,\n    body: nativeAlert.body,\n    \"launch-image\": nativeAlert.launchImage,\n    \"title-loc-key\": nativeAlert.titleLocKey,\n    \"title-loc-args\": nativeAlert.titleLocArgs,\n    \"subtitle-loc-key\": nativeAlert.subtitleLocKey,\n    \"subtitle-loc-args\": nativeAlert.subtitleLocArgs,\n    \"loc-key\": nativeAlert.locKey,\n    \"loc-args\": nativeAlert.locArgs,\n  };\n\n  return alert;\n}\n\n/**\n * Creates an APNs native message to send to Notification Hubs.\n * @param nativeMessage - The Apple native message properties to set.\n * @param additionalProperties - Additional properties for Apple messages.\n * @returns An AppleNotification to send to Notification Hubs.\n */\nexport function buildAppleNativeMessage(\n  nativeMessage: AppleNativeMessage,\n  additionalProperties?: Record<string, any>\n): AppleNotification {\n  const headers: Record<string, string> = {};\n\n  const message: Record<string, any> = {\n    aps: {\n      alert: createAppleNativeAlert(nativeMessage.alert),\n      sound: nativeMessage.sound,\n      badge: nativeMessage.badge,\n      \"thread-id\": nativeMessage.threadId,\n      category: nativeMessage.category,\n      \"content-available\": nativeMessage.contentAvailable,\n      \"mutable-content\": nativeMessage.mutableContent,\n      \"target-content-id\": nativeMessage.targetContentId,\n      \"interruption-level\": nativeMessage.interruptionLevel,\n      \"relevance-score\": nativeMessage.relevanceScore,\n      \"filter-criteria\": nativeMessage.filterCriteria,\n    },\n    ...additionalProperties,\n  };\n\n  const apnsPriority = nativeMessage?.contentAvailable === 1 ? \"5\" : \"10\";\n  headers[\"apns-priority\"] = apnsPriority;\n\n  return createAppleNotification({\n    body: JSON.stringify(message),\n    headers: headers,\n  });\n}\n\n/**\n * Represents the targets, options, and payload for HTTP JSON messages for the Firebase Legacy HTTP interface.\n */\nexport interface FirebaseLegacyNativeMessage {\n  /**\n   * The recipient of a message.\n   */\n  to?: string;\n\n  /**\n   * The recipient of a multicast message, a message sent to more than one registration token.\n   */\n  registrationIds?: string[];\n\n  /**\n   * A logical expression of conditions that determine the message target.\n   */\n  condition?: string;\n\n  /**\n   * Used to identify a group of messages.\n   */\n  collapseKey?: string;\n\n  /**\n   * The priority of the message.\n   */\n  priority?: \"normal\" | \"high\";\n\n  /**\n   * The background notification flag. To perform a silent background update,\n   * specify the value 1 and don’t include the alert, badge, or sound keys in your payload.\n   */\n  contentAvailable?: boolean;\n\n  /**\n   * The notification service app extension flag. If the value is 1, the system passes\n   * the notification to your notification service app extension before delivery.\n   */\n  mutableContent?: number;\n\n  /**\n   * Specifies how long (in seconds) the message should be kept in FCM storage if the device is offline\n   */\n  timeToLive?: number;\n\n  /**\n   * The package name of the application where the registration tokens must match in order to receive the message.\n   */\n  restrictedPackageName?: string;\n\n  /**\n   * When set to true, allows developers to test a request without actually sending a message.\n   */\n  dryRun?: boolean;\n\n  /**\n   * Custom key-value pairs of the message's payload.\n   */\n  data?: Record<string, any>;\n\n  /**\n   * The predefined, user-visible key-value pairs of the notification payload.\n   */\n  notification?:\n    | FirebaseLegacyAppleNativePayload\n    | FirebaseLegacyAndroidNativePayload\n    | FirebaseLegacyWebNativePayload;\n}\n\n/**\n * Represents an APNs native payload for the Firebase Legacy HTTP interface.\n */\nexport interface FirebaseLegacyAppleNativePayload {\n  /**\n   * The notification's title.\n   */\n  title?: string;\n\n  /**\n   * The notification's body text.\n   */\n  body?: string;\n\n  /**\n   * The sound to play when the device receives the notification.\n   */\n  sound?: string;\n\n  /**\n   * The value of the badge on the home screen app icon.\n   */\n  badge?: string;\n\n  /**\n   * The action associated with a user click on the notification which corresponds to the APNs category.\n   */\n  clickAction?: string;\n\n  /**\n   * The notification's subtitle.\n   */\n  subtitle?: string;\n\n  /**\n   * The key to the body string in the app's string resources to use to localize the body text to the user's current localization.\n   */\n  bodyLocKey?: string;\n\n  /**\n   * Variable string values to be used in place of the format specifiers in body_loc_key to use to localize the body text to the user's current localization.\n   */\n  bodyLocArgs?: string[];\n\n  /**\n   * The key to the title string in the app's string resources to use to localize the title text to the user's current localization.\n   */\n  titleLocKey?: string;\n\n  /**\n   * Variable string values to be used in place of the format specifiers in title_loc_key to use to localize the title text to the user's current localization.\n   */\n  titleLocArgs?: string[];\n}\n\n/**\n * Represents an Android native payload for the Firebase Legacy HTTP interface.\n */\nexport interface FirebaseLegacyAndroidNativePayload {\n  /**\n   * The notification's title.\n   */\n  title?: string;\n\n  /**\n   * The notification's body text.\n   */\n  body?: string;\n\n  /**\n   * The notification's channel ID.\n   */\n  androidChannelId?: string;\n\n  /**\n   * The notification's icon.\n   */\n  icon?: string;\n\n  /**\n   * The sound to play when the device receives the notification.\n   */\n  sound?: string;\n\n  /**\n   * Identifier used to replace existing notifications in the notification drawer.\n   */\n  tag?: string;\n\n  /**\n   * The notification's icon color, expressed in #rrggbb format.\n   */\n  color?: string;\n\n  /**\n   * The action associated with a user click on the notification.\n   */\n  clickAction?: string;\n\n  /**\n   * The key to the body string in the app's string resources to use to localize the body text to the user's current localization.\n   */\n  bodyLocKey?: string;\n\n  /**\n   * Variable string values to be used in place of the format specifiers in body_loc_key to use to localize the body text to the user's current localization.\n   */\n  bodyLocArgs?: string[];\n\n  /**\n   * The key to the title string in the app's string resources to use to localize the title text to the user's current localization.\n   */\n  titleLocKey?: string;\n\n  /**\n   * Variable string values to be used in place of the format specifiers in title_loc_key to use to localize the title text to the user's current localization.\n   */\n  titleLocArgs?: string[];\n}\n\n/**\n * Represents an Web Push native payload for the Firebase Legacy HTTP interface.\n */\nexport interface FirebaseLegacyWebNativePayload {\n  /**\n   * The notification's title.\n   */\n  title?: string;\n\n  /**\n   * The notification's body text.\n   */\n  body?: string;\n\n  /**\n   * The URL to use for the notification's icon.\n   */\n  icon?: string;\n\n  /**\n   * The action associated with a user click on the notification.\n   */\n  clickAction?: string;\n}\n\nfunction buildFirebaseLegacyNativePayload(\n  nativeNotification?:\n    | FirebaseLegacyAppleNativePayload\n    | FirebaseLegacyAndroidNativePayload\n    | FirebaseLegacyWebNativePayload\n): Record<string, any> | undefined {\n  if (!isDefined(nativeNotification)) {\n    return undefined;\n  }\n\n  const androidMessage = nativeNotification as FirebaseLegacyAndroidNativePayload;\n  const appleMessage = nativeNotification as FirebaseLegacyAppleNativePayload;\n\n  const notification: Record<string, any> = {\n    title: nativeNotification.title,\n    body: nativeNotification.body,\n    click_action: nativeNotification.clickAction,\n\n    // Apple/Android fields\n    sound: appleMessage.sound,\n    badge: appleMessage.badge,\n    subtitle: appleMessage.subtitle,\n    body_loc_key: appleMessage.bodyLocKey,\n    body_loc_args: appleMessage.bodyLocArgs,\n    title_loc_key: appleMessage.bodyLocKey,\n    title_loc_args: appleMessage.bodyLocArgs,\n\n    // Android/Web fields\n    android_channel_id: androidMessage.androidChannelId,\n    icon: androidMessage.icon,\n    tag: androidMessage.tag,\n    color: androidMessage.color,\n  };\n\n  return notification;\n}\n\n/**\n * Creates a FirebaseLegacyNotification from a native Firebase payload.\n * @param nativeMessage - The native message payload to send to Notification Hubs.\n * @returns The FirebaseLegacyNotification to send to Notification Hubs.\n */\nexport function buildFirebaseLegacyNativeMessage(\n  nativeMessage: FirebaseLegacyNativeMessage\n): FirebaseLegacyNotification {\n  const jsonMessage: Record<string, any> = {\n    to: nativeMessage.to,\n    registration_ids: nativeMessage.registrationIds,\n    condition: nativeMessage.condition,\n    collapse_key: nativeMessage.collapseKey,\n    priority: nativeMessage.priority,\n    content_available: nativeMessage.contentAvailable,\n    mutable_content: nativeMessage.mutableContent,\n    time_to_live: nativeMessage.timeToLive,\n    restricted_package_name: nativeMessage.restrictedPackageName,\n    dry_run: nativeMessage.dryRun,\n    data: nativeMessage.data,\n    notification: buildFirebaseLegacyNativePayload(nativeMessage.notification),\n  };\n\n  return createFirebaseLegacyNotification({\n    body: JSON.stringify(jsonMessage),\n  });\n}\n\n/**\n * Describes ADM notification messages.\n */\nexport interface AdmNativeNotification {\n  /**\n   * The notification's title.\n   */\n  title?: string;\n\n  /**\n   * The notification's body text.\n   */\n  body?: string;\n\n  /**\n   * The notification's icon.\n   */\n  icon?: string;\n\n  /**\n   * The notification's icon color, expressed in #rrggbb format.\n   */\n  color?: string;\n\n  /**\n   * The sound to play when the device receives the notification. Supports \"default\" or the filename of a sound resource bundled in the app.\n   */\n  sound?: string;\n\n  /**\n   * Identifier used to replace existing notifications in the notification drawer.\n   */\n  tag?: string;\n\n  /**\n   * The action associated with a user click on the notification.\n   */\n  clickAction?: string;\n\n  /**\n   * The key to the body string in the app's string resources to use to localize the body text to the user's current localization.\n   */\n  bodyLocKey?: string;\n\n  /**\n   * Variable string values to be used in place of the format specifiers in body_loc_key to use to localize the body text to the user's current localization.\n   */\n  bodyLocArgs?: string[];\n\n  /**\n   * The key to the title string in the app's string resources to use to localize the title text to the user's current localization.\n   */\n  titleLocKey?: string;\n\n  /**\n   * Variable string values to be used in place of the format specifiers in title_loc_key to use to localize the title text to the user's current localization.\n   */\n  titleLocArgs?: string[];\n\n  /**\n   * The notification's channel id.\n   */\n  channelId?: string;\n\n  /**\n   * Sets the \"ticker\" text, which is sent to accessibility services.\n   */\n  ticker?: string;\n\n  /**\n   * When set to false or unset, the notification is automatically dismissed when the user clicks it in the panel.\n   */\n  sticky?: boolean;\n\n  /**\n   * Set the time that the event in the notification occurred. Must be a timestamp in RFC3339 UTC \"Zulu\" format, accurate to nanoseconds. Example: \"2014-10-02T15:01:23.045123456Z\".\n   */\n  eventTime?: string;\n\n  /**\n   * Set whether or not this notification is relevant only to the current device.\n   */\n  localOnly?: boolean;\n\n  /**\n   * Set the relative priority for this notification.\n   */\n  notificationPriority?: number; // TODO: Enum?\n\n  /**\n   * If set to true, use the Android framework's default sound for the notification.\n   */\n  defaultSound?: boolean;\n\n  /**\n   * Set the Notification.visibility of the notification.\n   */\n  visibility?: number; // TODO: Enum?\n\n  /**\n   * Sets the number of items this notification represents.\n   */\n  notificationCount?: number;\n\n  /**\n   * Contains the URL of an image that is going to be displayed in a notification.\n   */\n  image?: string;\n}\n\n/**\n * Represents a native ADM notification message payload.\n */\nexport interface AdmNativeMessage {\n  /**\n   * The notification payload to send with the message.\n   */\n  notification?: AdmNativeNotification;\n\n  /**\n   * The payload data to send with the message.\n   */\n  data?: Record<string, string>;\n\n  /**\n   * The priority of the msssage.\n   */\n  priority?: \"normal\" | \"high\";\n\n  /**\n   * This is an arbitrary string used to indicate that multiple messages are logically the same\n   * and that ADM is allowed to drop previously enqueued messages in favor of this new one.\n   */\n  consolidationKey?: string;\n\n  /**\n   * The number of seconds that ADM should retain the message if the device is offline.\n   */\n  expiresAfter?: number;\n\n  /**\n   * This is a base-64-encoded MD5 checksum of the data parameter.\n   */\n  md5?: string;\n}\n\nfunction buildAdmNativeNotification(\n  nativeNotification?: AdmNativeNotification\n): Record<string, any> | undefined {\n  if (!isDefined(nativeNotification)) {\n    return undefined;\n  }\n\n  return {\n    title: nativeNotification.title,\n    body: nativeNotification.body,\n    icon: nativeNotification.icon,\n    color: nativeNotification.color,\n    sound: nativeNotification.sound,\n    tag: nativeNotification.tag,\n    click_action: nativeNotification.clickAction,\n    body_loc_key: nativeNotification.bodyLocKey,\n    body_loc_args: nativeNotification.bodyLocArgs,\n    title_loc_key: nativeNotification.titleLocKey,\n    title_loc_args: nativeNotification.titleLocArgs,\n    channel_id: nativeNotification.channelId,\n    ticker: nativeNotification.ticker,\n    sticky: nativeNotification.sticky,\n    event_time: nativeNotification.eventTime,\n    local_only: nativeNotification.localOnly,\n    notification_priority: nativeNotification.notificationPriority,\n    default_sound: nativeNotification.defaultSound,\n    visibility: nativeNotification.visibility,\n    notification_count: nativeNotification.notificationCount,\n    image: nativeNotification.image,\n  };\n}\n\n/**\n * Creates a AdmNotification from a native ADM payload.\n * @param nativeMessage - The native message payload to send to Notification Hubs.\n * @returns The AdmNotification to send to Notification Hubs.\n */\nexport function buildAdmNativeMessage(nativeMessage: AdmNativeMessage): AdmNotification {\n  const jsonObj: Record<string, any> = {\n    notification: buildAdmNativeNotification(nativeMessage.notification),\n    data: nativeMessage.data || {},\n    ...nativeMessage,\n  };\n\n  return createAdmNotification({\n    body: JSON.stringify(jsonObj),\n  });\n}\n\n/**\n * Represents the Baidu Apple native payload.\n */\nexport interface BaiduAppleNativePayload {\n  /**\n   * The alert string.\n   */\n  alert?: string;\n\n  /**\n   * The APNs sound to play.\n   */\n  sound?: string;\n\n  /**\n   * The APNs badge count.\n   */\n  badge?: number;\n}\n\n/**\n * Baidu Native Format:\n * https://stackoverflow.com/questions/42591815/customize-baidu-push-json-payload\n * http://www.tuicool.com/articles/ZnmANn\n */\nexport interface BaiduNativeMessage extends Record<string, any> {\n  /**\n   * Notification title for Android.\n   */\n  title?: string;\n\n  /**\n   * Baidu Notification description for Android.\n   */\n  description?: string;\n\n  /**\n   * Baidu Notification builder ID.\n   */\n  notificationBuilderId?: number;\n\n  /**\n   * Baidu Notification Android basic style.\n   */\n  notificationBasicStyle?: number;\n\n  /**\n   * Baidu Android open type.\n   */\n  openType?: number;\n\n  /**\n   * Baidu Android net support option.\n   */\n  netSupport?: number;\n\n  /**\n   * Baidu Android user confirm.\n   */\n  userConfirm?: number;\n\n  /**\n   * Baidu Android URL.\n   */\n  url?: string;\n\n  /**\n   * Baidu Android package content.\n   */\n  pkgContent?: string;\n\n  /**\n   * Baidu Android package version.\n   */\n  pkgVersion?: string;\n\n  /**\n   * Baidu Android custom content dictionary.\n   */\n  customContent?: Record<string, any>;\n\n  /**\n   * Baidu APNs support.\n   */\n  aps?: BaiduAppleNativePayload;\n}\n\n/**\n * Creates a BaiduNotification from a native Baidu payload.\n * @param nativeMessage - The native message payload to send to Notification Hubs.\n * @param additionalProperties - Additional properties for Apple Baidu messages.\n * @returns The BaiduNotification to send to Notification Hubs.\n */\nexport function buildBaiduNativeMessage(\n  nativeMessage: BaiduNativeMessage,\n  additionalProperties?: Record<string, any>\n): BaiduNotification {\n  const jsonObj: Record<string, any> = {\n    title: nativeMessage.title,\n    description: nativeMessage.description,\n    notification_builder_id: nativeMessage.notificationBuilderId,\n    notification_basic_style: nativeMessage.notificationBasicStyle,\n    open_type: nativeMessage.openType,\n    net_support: nativeMessage.netSupport,\n    user_confirm: nativeMessage.userConfirm,\n    url: nativeMessage.url,\n    pkg_content: nativeMessage.pkgContent,\n    pkg_version: nativeMessage.pkgVersion,\n    custom_content: nativeMessage.customContent,\n    aps: nativeMessage.aps,\n    ...additionalProperties,\n  };\n\n  return createBaiduNotification({\n    body: JSON.stringify(jsonObj),\n  });\n}\n\n/**\n * Represents the types of Windows Badge Glyphs\n */\nexport type WindowsBadgeGlyphType =\n  | \"none\"\n  | \"activity\"\n  | \"alarm\"\n  | \"alert\"\n  | \"attention\"\n  | \"available\"\n  | \"away\"\n  | \"busy\"\n  | \"error\"\n  | \"newMessage\"\n  | \"paused\"\n  | \"playing\"\n  | \"unavailable\";\n\n/**\n * Represents the Windows Badge Message\n */\nexport interface WindowsBadgeNativeMessage {\n  /**\n   * Either a numeric value or a string value that specifies a predefined badge glyph.\n   */\n  value: WindowsBadgeGlyphType | number;\n}\n\n/**\n * Builds a WindowsNotification from a Windows Badge.\n * @param nativeMessage - The Windows Badge Message to build.\n * @returns A WindowsNotification created with the badge information.\n */\nexport function buildWindowsBadgeNativeMessage(\n  nativeMessage: WindowsBadgeNativeMessage\n): WindowsNotification {\n  const badge = {\n    $: { value: nativeMessage.value },\n  };\n\n  return createWindowsBadgeNotification({\n    body: stringifyXML(badge, { rootName: \"badge\" }),\n  });\n}\n"]}