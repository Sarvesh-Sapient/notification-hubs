{"version":3,"file":"notification.js","sourceRoot":"","sources":["../../../src/models/notification.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport * as Constants from \"../utils/constants.js\";\n\n/**\n * Represents a notification hub.\n */\nexport interface NotificationCommon {\n  /**\n   * The body for the push notification.\n   */\n  body: string;\n\n  /**\n   * The headers to include for the push notification.\n   */\n  headers?: Record<string, string>;\n\n  /**\n   * The platform for the push notification.\n   */\n  platform: string;\n\n  /**\n   * The content type for the push notification.\n   */\n  contentType: string;\n}\n\n/**\n * Represents a JSON notification hub.\n */\nexport interface JsonNotification extends NotificationCommon {\n  /**\n   * The content type for the push notification.\n   */\n  contentType: \"application/json;charset=utf-8\";\n}\n\n/**\n * Represents an Apple APNs push notification.\n */\nexport interface AppleNotification extends JsonNotification {\n  /**\n   * The platform for the push notification.\n   */\n  platform: \"apple\";\n}\n\n/**\n * Creates a notification to send to an Apple device.\n * @param notification - A partial message used to create a message for Apple.\n * @returns A newly created Apple.\n */\nexport function createAppleNotification(\n  notification: Omit<AppleNotification, \"platform\" | \"contentType\">\n): AppleNotification {\n  return {\n    ...notification,\n    platform: \"apple\",\n    contentType: Constants.JSON_CONTENT_TYPE,\n  };\n}\n\n/**\n * Represents an Amazon Device Messaging (ADM) push notification.\n */\nexport interface AdmNotification extends JsonNotification {\n  /**\n   * The platform for the push notification.\n   */\n  platform: \"adm\";\n}\n\n/**\n * Creates a notification to send to an Amazon Device Messaging device.\n * @param notification - A partial message used to create a message for Amazon Device Messaging.\n * @returns A newly created Amazon Device Messaging.\n */\nexport function createAdmNotification(\n  notification: Omit<AdmNotification, \"platform\" | \"contentType\">\n): AdmNotification {\n  return {\n    ...notification,\n    platform: \"adm\",\n    contentType: Constants.JSON_CONTENT_TYPE,\n  };\n}\n\n/**\n * Represents a Baidu push notification.\n */\nexport interface BaiduNotification extends JsonNotification {\n  /**\n   * The platform for the push notification.\n   */\n  platform: \"baidu\";\n}\n\n/**\n * Creates a notification to send to a Baidu registered device.\n * @param notification - A partial message used to create a message for Baidu.\n * @returns A newly created Baidu.\n */\nexport function createBaiduNotification(\n  notification: Omit<BaiduNotification, \"platform\" | \"contentType\">\n): BaiduNotification {\n  return {\n    ...notification,\n    platform: \"baidu\",\n    contentType: Constants.JSON_CONTENT_TYPE,\n  };\n}\n\n/**\n * Represents a Browser push notification.\n */\nexport interface BrowserNotification extends JsonNotification {\n  /**\n   * The platform for the push notification.\n   */\n  platform: \"browser\";\n}\n\n/**\n * Creates a notification to send to a browser.\n * @param notification - A partial message used to create a message for a browser.\n * @returns A newly created Web Push browser.\n */\nexport function createBrowserNotification(\n  notification: Omit<BrowserNotification, \"platform\" | \"contentType\">\n): BrowserNotification {\n  return {\n    ...notification,\n    platform: \"browser\",\n    contentType: Constants.JSON_CONTENT_TYPE,\n  };\n}\n\n/**\n * Represents a Firebase legacy HTTP push notification.\n */\nexport interface FirebaseLegacyNotification extends JsonNotification {\n  /**\n   * The platform for the push notification.\n   */\n  platform: \"gcm\";\n}\n\n/**\n * Creates a notification to send to Firebase.\n * @param notification - A partial message used to create a message for Firebase.\n * @returns A newly created Firebase.\n */\nexport function createFirebaseLegacyNotification(\n  notification: Omit<FirebaseLegacyNotification, \"platform\" | \"contentType\">\n): FirebaseLegacyNotification {\n  return {\n    ...notification,\n    platform: \"gcm\",\n    contentType: Constants.JSON_CONTENT_TYPE,\n  };\n}\n\n/**\n * Represents a template based push notification.\n */\nexport interface TemplateNotification extends JsonNotification {\n  /**\n   * The platform for the push notification.\n   */\n  platform: \"template\";\n}\n\n/**\n * Creates a notification to send to Firebase.\n * @param notification - A partial message used to create a message for Firebase.\n * @returns A newly created Firebase.\n */\nexport function createTemplateNotification(\n  notification: Omit<TemplateNotification, \"platform\" | \"contentType\">\n): TemplateNotification {\n  return {\n    ...notification,\n    platform: \"template\",\n    contentType: Constants.JSON_CONTENT_TYPE,\n  };\n}\n\n/**\n * Represents the possible WNS content-types.\n */\nexport type WindowsContentType = \"application/xml\" | \"application/octet-stream\";\n\n/**\n * Represents a Windows Notification Services (WNS) push notification.\n */\nexport interface WindowsNotification extends NotificationCommon {\n  /**\n   * The platform for the push notification.\n   */\n  platform: \"wns\";\n\n  /**\n   * The content type for the push notification.\n   */\n  contentType: WindowsContentType;\n}\n\n/**\n * Creates a badge message to send to WNS.\n * @param notification - A partial message used to create a badge message for WNS.\n * @returns A newly created WNS badge.\n */\nexport function createWindowsBadgeNotification(\n  notification: Omit<WindowsNotification, \"platform\" | \"contentType\">\n): WindowsNotification {\n  const result: WindowsNotification = {\n    ...notification,\n    platform: \"wns\",\n    contentType: Constants.XML_CONTENT_TYPE,\n  };\n\n  if (!result.headers) {\n    result.headers = {};\n  }\n\n  result.headers[Constants.WNS_TYPE_NAME] = Constants.WNS_BADGE;\n\n  return result;\n}\n\n/**\n * Creates a tile message to send to WNS.\n * @param notification - A partial message used to create a tile message for WNS.\n * @returns A newly created WNS tile.\n */\nexport function createWindowsTileNotification(\n  notification: Omit<WindowsNotification, \"platform\" | \"contentType\">\n): WindowsNotification {\n  const result: WindowsNotification = {\n    ...notification,\n    platform: \"wns\",\n    contentType: Constants.XML_CONTENT_TYPE,\n  };\n\n  if (!result.headers) {\n    result.headers = {};\n  }\n\n  result.headers[Constants.WNS_TYPE_NAME] = Constants.WNS_TITLE;\n\n  return result;\n}\n\n/**\n * Creates a toast message to send to WNS.\n * @param notification - A partial message used to create a toast message for WNS.\n * @returns A newly created WNS toast.\n */\nexport function createWindowsToastNotification(\n  notification: Omit<WindowsNotification, \"platform\" | \"contentType\">\n): WindowsNotification {\n  const result: WindowsNotification = {\n    ...notification,\n    platform: \"wns\",\n    contentType: Constants.XML_CONTENT_TYPE,\n  };\n\n  if (!result.headers) {\n    result.headers = {};\n  }\n\n  result.headers[Constants.WNS_TYPE_NAME] = Constants.WNS_TOAST;\n\n  return result;\n}\n\n/**\n * Creates a notification to send to WNS in wns/raw format..\n * @param notification - A partial message used to create a message for WNS in XML format.\n * @returns A newly created WNS message using XML.\n */\nexport function createWindowsRawNotification(\n  notification: Omit<WindowsNotification, \"platform\" | \"contentType\">\n): WindowsNotification {\n  const result: WindowsNotification = {\n    ...notification,\n    platform: \"wns\",\n    contentType: Constants.STREAM_CONTENT_TYPE,\n  };\n\n  if (!result.headers) {\n    result.headers = {};\n  }\n\n  result.headers[Constants.WNS_TYPE_NAME] = Constants.WNS_RAW;\n\n  return result;\n}\n\n/**\n * Represents the possible push notification messages types.\n */\nexport type Notification =\n  | AppleNotification\n  | AdmNotification\n  | BaiduNotification\n  | BrowserNotification\n  | FirebaseLegacyNotification\n  | WindowsNotification\n  | TemplateNotification;\n"]}