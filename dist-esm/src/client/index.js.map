{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/client/index.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC,OAAO,EAIL,iBAAiB,GAClB,MAAM,2BAA2B,CAAC;AACnC,OAAO,EACL,iCAAiC,EACjC,qCAAqC,GACtC,MAAM,mCAAmC,CAAC;AAC3C,OAAO,EAAE,QAAQ,EAAE,YAAY,EAAE,MAAM,iBAAiB,CAAC;AAIzD,OAAO,EAAE,aAAa,EAAE,MAAM,oBAAoB,CAAC;AAEnD,MAAM,WAAW,GAAG,SAAS,CAAC;AAqC9B;;;;;GAKG;AACH,MAAM,UAAU,mBAAmB,CACjC,gBAAwB,EACxB,OAAe,EACf,UAAyC,EAAE;IAE3C,OAAO,IAAI,6BAA6B,CAAC,gBAAgB,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;AAC/E,CAAC;AAED,MAAM,6BAA8B,SAAQ,aAAa;IAKvD,YACE,gBAAwB,EACxB,OAAe,EACf,UAAyC,EAAE;QAE3C,KAAK,CAAC,gBACJ,sBAAsB,EAAE;gBACtB,QAAQ;aACT,EACD,oBAAoB,EAAE;gBACpB,YAAY;aACb,IACE,OAAO,CACsB,CAAC,CAAC;QAEpC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QAEvB,MAAM,gBAAgB,GAAG,qCAAqC,CAAC,gBAAgB,CAAC,CAAC;QACjF,IAAI,CAAC,OAAO,GAAG,gBAAgB,CAAC,QAAQ,CAAC;QACzC,IAAI,CAAC,gBAAgB,GAAG,iCAAiC,CACvD,gBAAgB,CAAC,eAAe,EAChC,gBAAgB,CAAC,mBAAmB,CACrC,CAAC;IACJ,CAAC;IAED,aAAa;QACX,MAAM,aAAa,GAAG,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACnE,MAAM,OAAO,GAAG,iBAAiB,EAAE,CAAC;QACpC,OAAO,CAAC,GAAG,CAAC,eAAe,EAAE,aAAa,CAAC,KAAK,CAAC,CAAC;QAClD,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,WAAW,CAAC,CAAC;QAEzC,OAAO,OAAO,CAAC;IACjB,CAAC;IAED,UAAU;QACR,mFAAmF;QACnF,MAAM,GAAG,GAAG,IAAI,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC,CAAC;QAC/D,GAAG,CAAC,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC;QAC5B,GAAG,CAAC,YAAY,CAAC,GAAG,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC;QAEjD,OAAO,GAAG,CAAC;IACb,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  HttpHeaders,\n  PipelineRequest,\n  PipelineResponse,\n  createHttpHeaders,\n} from \"@azure/core-rest-pipeline\";\nimport {\n  createTokenProviderFromConnection,\n  parseNotificationHubsConnectionString,\n} from \"../utils/connectionStringUtils.js\";\nimport { parseXML, stringifyXML } from \"@azure/core-xml\";\nimport { InternalClientPipelineOptions } from \"@azure/core-client\";\nimport { NotificationHubsClientOptions } from \"../models/options.js\";\nimport { SasTokenProvider } from \"@azure/core-amqp\";\nimport { ServiceClient } from \"@azure/core-client\";\n\nconst API_VERSION = \"2020-06\";\n\n/**\n * Represents the Notification Hubs SDK client context.\n */\nexport interface NotificationHubsClientContext {\n  /**\n   * The SAS Token Provider for connecting to Notification Hubs.\n   */\n  readonly sasTokenProvider: SasTokenProvider;\n\n  /**\n   * The base URL for the Notification Hub namespace.\n   */\n  readonly baseUrl: string;\n\n  /**\n   * The Notification Hub name.\n   */\n  readonly hubName: string;\n\n  /**\n   * @internal\n   */\n  sendRequest(request: PipelineRequest): Promise<PipelineResponse>;\n\n  /**\n   * @internal\n   */\n  createHeaders(): HttpHeaders;\n\n  /**\n   * @internal\n   */\n  requestUrl(): URL;\n}\n\n/**\n * Creates a NotificationHubClient from the Access Policy connection string and hub name.\n * @param connectionString - The Access Policy connection string for the notification hub.\n * @param hubName - The notification hub name.\n * @returns A NotificationHubsClientContext initialized from the connection string and hub name.\n */\nexport function createClientContext(\n  connectionString: string,\n  hubName: string,\n  options: NotificationHubsClientOptions = {}\n): NotificationHubsClientContext {\n  return new NotificationHubsServiceClient(connectionString, hubName, options);\n}\n\nclass NotificationHubsServiceClient extends ServiceClient implements NotificationHubsClientContext {\n  sasTokenProvider: SasTokenProvider;\n  baseUrl: string;\n  hubName: string;\n\n  constructor(\n    connectionString: string,\n    hubName: string,\n    options: NotificationHubsClientOptions = {}\n  ) {\n    super({\n      deserializationOptions: {\n        parseXML,\n      },\n      serializationOptions: {\n        stringifyXML,\n      },\n      ...options,\n    } as InternalClientPipelineOptions);\n\n    this.hubName = hubName;\n\n    const parsedConnection = parseNotificationHubsConnectionString(connectionString);\n    this.baseUrl = parsedConnection.endpoint;\n    this.sasTokenProvider = createTokenProviderFromConnection(\n      parsedConnection.sharedAccessKey,\n      parsedConnection.sharedAccessKeyName\n    );\n  }\n\n  createHeaders(): HttpHeaders {\n    const authorization = this.sasTokenProvider.getToken(this.baseUrl);\n    const headers = createHttpHeaders();\n    headers.set(\"Authorization\", authorization.token);\n    headers.set(\"x-ms-version\", API_VERSION);\n\n    return headers;\n  }\n\n  requestUrl(): URL {\n    // Node doesn't allow change in protocol but browsers do, so doing a string replace\n    const url = new URL(this.baseUrl.replace(\"sb://\", \"https://\"));\n    url.pathname = this.hubName;\n    url.searchParams.set(\"api-version\", API_VERSION);\n\n    return url;\n  }\n}\n"]}