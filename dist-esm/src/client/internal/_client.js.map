{"version":3,"file":"_client.js","sourceRoot":"","sources":["../../../../src/client/internal/_client.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC,OAAO,EAKL,SAAS,EACT,qBAAqB,GACtB,MAAM,2BAA2B,CAAC;AAOnC,OAAO,EAAE,SAAS,EAAE,MAAM,sBAAsB,CAAC;AACjD,OAAO,EAAE,aAAa,EAAE,MAAM,yBAAyB,CAAC;AAExD;;GAEG;AACH,MAAM,UAAU,aAAa,CAC3B,QAAa,EACb,MAAmB,EACnB,OAAoB,EACpB,OAAyB;IAEzB,OAAO,qBAAqB,+CACvB,OAAO,CAAC,cAAc,GACtB,OAAO,CAAC,cAAc,KACzB,GAAG,EAAE,QAAQ,CAAC,QAAQ,EAAE,EACxB,WAAW,EAAE,OAAO,CAAC,WAAW,EAChC,MAAM;QACN,OAAO,IACP,CAAC;AACL,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,yBAAyB,CAAC,QAA0B;IAClE,MAAM,aAAa,GAAG,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,6BAA6B,CAAC,CAAC;IAC1E,MAAM,UAAU,GAAG,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;IACtD,MAAM,QAAQ,GAAG,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;IAElD,OAAO;QACL,aAAa;QACb,UAAU;QACV,QAAQ;KACT,CAAC;AACJ,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,6BAA6B,CAC3C,QAA0B;IAE1B,MAAM,MAAM,GAAG,yBAAyB,CAAC,QAAQ,CAAC,CAAC;IACnD,IAAI,cAAkC,CAAC;IACvC,IAAI,MAAM,CAAC,QAAQ,EAAE;QACnB,MAAM,WAAW,GAAG,IAAI,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QAC7C,cAAc,GAAG,WAAW,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;KACrD;IAED,uCACK,MAAM,KACT,cAAc,IACd;AACJ,CAAC;AAED;;;;;;GAMG;AACH,MAAM,CAAC,KAAK,UAAU,WAAW,CAC/B,OAAsC,EACtC,OAAwB,EACxB,iBAAoC;IAEpC,MAAM,QAAQ,GAAa,KAAK,CAAC,OAAO,CAAC,iBAAiB,CAAC;QACzD,CAAC,CAAC,iBAAiB;QACnB,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC;IAExB,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;IAEpD,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,UAAU,EAAE,EAAE,CAAC,UAAU,KAAK,QAAQ,CAAC,MAAM,CAAC,EAAE;QAClE,MAAM,YAAY,GAAG,QAAQ,CAAC,UAAU,CAAC;QACzC,IAAI,OAA2B,CAAC;QAChC,IAAI,SAAS,CAAC,YAAY,CAAC,EAAE;YAC3B,IAAI;gBACF,OAAO,GAAG,MAAM,aAAa,CAAC,YAAY,CAAC,CAAC;aAC7C;YAAC,OAAO,GAAG,EAAE;gBACZ,0BAA0B;aAC3B;SACF;QAED,IAAI,YAAgC,CAAC;QACrC,IAAI,SAAS,CAAC,OAAO,CAAC,EAAE;YACtB,YAAY,GAAG,2BAA2B,OAAO,EAAE,CAAC;SACrD;aAAM;YACL,YAAY,GAAG,gCAAgC,QAAQ,CAAC,MAAM,EAAE,CAAC;SAClE;QAED,MAAM,IAAI,SAAS,CAAC,YAAY,EAAE;YAChC,UAAU,EAAE,QAAQ,CAAC,MAAM;YAC3B,QAAQ;SACT,CAAC,CAAC;KACJ;IAED,OAAO,QAAQ,CAAC;AAClB,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  HttpHeaders,\n  HttpMethods,\n  PipelineRequest,\n  PipelineResponse,\n  RestError,\n  createPipelineRequest,\n} from \"@azure/core-rest-pipeline\";\nimport {\n  NotificationHubsMessageResponse,\n  NotificationHubsResponse,\n} from \"../../models/response.js\";\nimport { NotificationHubsClientContext } from \"../index.js\";\nimport { OperationOptions } from \"@azure/core-client\";\nimport { isDefined } from \"../../utils/utils.js\";\nimport { parseXMLError } from \"../../utils/xmlUtils.js\";\n\n/**\n * @internal\n */\nexport function createRequest(\n  endpoint: URL,\n  method: HttpMethods,\n  headers: HttpHeaders,\n  options: OperationOptions\n): PipelineRequest {\n  return createPipelineRequest({\n    ...options.tracingOptions,\n    ...options.requestOptions,\n    url: endpoint.toString(),\n    abortSignal: options.abortSignal,\n    method,\n    headers,\n  });\n}\n\n/**\n * @internal\n */\nexport function parseNotificationResponse(response: PipelineResponse): NotificationHubsResponse {\n  const correlationId = response.headers.get(\"x-ms-correlation-request-id\");\n  const trackingId = response.headers.get(\"TrackingId\");\n  const location = response.headers.get(\"Location\");\n\n  return {\n    correlationId,\n    trackingId,\n    location,\n  };\n}\n\n/**\n * @internal\n */\nexport function parseNotificationSendResponse(\n  response: PipelineResponse\n): NotificationHubsMessageResponse {\n  const result = parseNotificationResponse(response);\n  let notificationId: string | undefined;\n  if (result.location) {\n    const locationUrl = new URL(result.location);\n    notificationId = locationUrl.pathname.split(\"/\")[3];\n  }\n\n  return {\n    ...result,\n    notificationId,\n  };\n}\n\n/**\n * Sends a request through the client context.\n * @param context - The client context to use.\n * @param request - The HTTP request to send.\n * @param successStatusCode - A status code or list of status codes to check for success.\n * @returns The HTTP Response.\n */\nexport async function sendRequest(\n  context: NotificationHubsClientContext,\n  request: PipelineRequest,\n  successStatusCode: number | number[]\n): Promise<PipelineResponse> {\n  const statuses: number[] = Array.isArray(successStatusCode)\n    ? successStatusCode\n    : [successStatusCode];\n\n  const response = await context.sendRequest(request);\n\n  if (!statuses.some((statusCode) => statusCode === response.status)) {\n    const responseBody = response.bodyAsText;\n    let details: string | undefined;\n    if (isDefined(responseBody)) {\n      try {\n        details = await parseXMLError(responseBody);\n      } catch (err) {\n        // eslint-disable no-empty\n      }\n    }\n\n    let errorMessage: string | undefined;\n    if (isDefined(details)) {\n      errorMessage = `operations failed with: ${details}`;\n    } else {\n      errorMessage = `operation failed with status ${response.status}`;\n    }\n\n    throw new RestError(errorMessage, {\n      statusCode: response.status,\n      response,\n    });\n  }\n\n  return response;\n}\n"]}